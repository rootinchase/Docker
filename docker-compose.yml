version: '3.8'

services:
  # # #
  # Monitoring/Metrics
  #
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: unless-stopped
    user: root
    healthcheck:
      test: "/bin/wget -q -Y off http://localhost:9090/status -O /dev/null > /dev/null 2>&1"
      interval: 25s
      timeout: 3s
      start_period: 60s
    networks:
      - net
    depends_on:
      - cadvisor
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=200h'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/prometheus_data:/prometheus
    labels:
      org.label-schema.group: "monitoring"
  
  # # #
  # influxdb
  #
  influxdb:
    image: influxdb
    container_name: influxdb
    restart: unless-stopped
    networks:
      - net
    volumes:
      - ./influxdb:/var/lib/influxdb
    env_file:
      - ./env/influxdb.env
    labels:
      org.label-schema.group: "monitoring"

  # # #
  # Telegraf
  #
  telegraf:
    image: telegraf
    container_name: telegraf
    restart: always
    env_file:
      - ./env/telegraf.env
    networks:
      - net
    volumes:
     - ./telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:ro
     - /var/run/docker.sock:/var/run/docker.sock:ro
     - /sys:/rootfs/sys:ro
     - /proc:/rootfs/proc:ro
     - /etc:/rootfs/etc:ro

  # # #
  # DOCKER CONTAINERS METRICS COLLECTOR
  #
  cadvisor:
    image: google/cadvisor
    container_name: cadvisor
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:8080/cadvisor/healthz || exit 1"]
      interval: 60s
      timeout: 3s
      retries: 0
    networks:
      - net
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:rw
      - /sys:/sys:ro
      - /var/lib/docker:/var/lib/docker:ro
      - /cgroup:/cgroup:ro
    labels:
      org.label-schema.group: "monitoring"
  
  # # #
  # HOSTS METRICS COLLECTOR
  # 
  nodeexporter:
    image: prom/node-exporter
    container_name: nodeexporter
    restart: unless-stopped
    networks:
      - net
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    labels:
      org.label-schema.group: "monitoring"

  # # #
  # NGINX reverse proxy w/ webUI
  #
  proxy:
    container_name: proxy
    image: jc21/nginx-proxy-manager:2
    restart: always
    ports:
      - '80:80'
      - '443:443'
      - '81:81'
    environment:
      DISABLE_IPV6: 'true'
    volumes:
      - ./proxy/config.json:/app/config/production.json
      - ./proxy/data:/data
      - ./proxy/letsencrypt:/etc/letsencrypt
    networks:
      - net
    restart: unless-stopped

  # # #
  # Bitwarden: the self hosted Password Manager
  #
  bitwarden:
    container_name: bitwarden
    image: bitwardenrs/server
    restart: unless-stopped
    depends_on:
      - proxy
    volumes:
      - ./bitwarden:/data
    env_file:
      ./env/bitwarden.env
    networks:
      - net

  # # # 
  # Portainer, Docker management
  #
  portainer:
    container_name: portainer
    image: portainer/portainer-ce:latest
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - net
    depends_on:
      - proxy
    environment:
      - no-analytics
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./portainer:/data

  # # #
  # Jellyfin - A media server
  #
  jellyfin:
    container_name: jellyfin
    image: ghcr.io/linuxserver/jellyfin:latest
    restart: unless-stopped
    networks:
      - net
    env_file:
      - ./env/jellyfin.env
    ports:
      - 7359:7359/udp # local Jellyfin discovery
      - 1900:1900/udp # DLNA Discovery
    volumes:
      - ./jellyfin/config:/config
      - ./jellyfin/cache:/cache
      - ./media:/media
    devices:
      # VAAPI Devices
      - /dev/dri/renderD128:/dev/dri/renderD128
      - /dev/dri/card0:/dev/dri/card0

  # # #
  # Redis
  #
  redis:
    container_name: redis
    image: redis:6
    restart: unless-stopped
    #env_file:
    #  - ./env/redis.env
    volumes:
      - ./redis:/data
    networks:
      - net

  # # #
  # Nextcloud - a Gdrive/GDocs alternative
  #
  nextcloud:
    container_name: nextcloud
    build: ./dockerfiles/Nextcloud
    restart: always
    # env_file:
    #   - ./env/nextcloud.env
    volumes:
      - ./nextcloud/config:/var/www/html/config
      - ./nextcloud/data:/var/www/html/data
      - ./nextcloud/main:/var/www/html
    depends_on:
      - proxy
    networks:
      - net
  
  # # # 
  # WebMap 
  #
  webmap:
    image: reborntc/webmap
    container_name: webmap
    restart: unless-stopped
    depends_on: 
      - proxy
    volumes:
      - ./webmap:/opt/xml
    networks:
      - net
      - default

  # # # 
  # Dozzle - Docker Log viewer
  #
  dozzle:
    image: amir20/dozzle
    container_name: dozzle
    restart: unless-stopped
    depends_on:
      - proxy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - net
  

  # # #
  # WikiJS - A wiki
  #
  wikijs:
    image: ghcr.io/linuxserver/wikijs
    container_name: wikijs
    env_file:
      - ./env/wikijs.env
    depends_on:
      - proxy
    volumes:
      - ./wiki/config:/config
      - ./wiki/data:/data
    networks:
      - net
    restart: unless-stopped
  
  # # #
  # Heimdall, homepage
  #
  heimdall:
    image: linuxserver/heimdall
    container_name: heimdall
    restart: always
    networks:
      - net
    volumes:
      - ./heimdall:/config
    depends_on:
      - proxy
    env_file:
      - ./env/heimdall.env
  # # #
  # Homer
  #
  homer:
    image: b4bz/homer
    container_name: homer
    restart: unless-stopped
    volumes:
      - ./homer:/www/assets
    networks:
      - net
    depends_on:
      - proxy

  # # #
  # WEB BASED UI VISUALISATION OF THE METRICS
  #
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    user: root
    networks:
      - net
    healthcheck:
      test: ["CMD-SHELL", "wget -q --tries=1 --spider localhost:3000/api/health && echo 'ready'"]
      interval: 10s
      retries: 3
    env_file:
      - ./env/grafana.env
    volumes:
      - ./grafana/grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/provisioning/grafana.ini:/etc/grafana/grafana.ini:ro
    labels:
      org.label-schema.group: "monitoring"

  # # #
  # Snipe-IT - Asset tracking
  #
  snipe:
    image: snipe/snipe-it
    container_name: snipe
    restart: unless-stopped
    env_file:
      - ./env/snipe.env
    volumes:
      - ./snipe:/var/lib/snipeit
    networks:
      - net

  # # #
  # Photoprism
  # 
  photoprism:
    # Use photoprism/photoprism:preview instead for testing preview builds:
    image: photoprism/photoprism:latest
    container_name: photoprism
    restart: unless-stopped
    env_file:
      - ./env/photoprism.env
    networks:
      - net
    volumes:
      # Mounting an import folder is optional (see docs):
      - ./photos:/photoprism/import
      - ./photoprism:/photoprism/storage

  # # #
  # Keycloack SSO
  #
  keycloak:
    image: quay.io/keycloak/keycloak
    container_name: keycloak
    restart: unless-stopped
    env_file:
      - ./env/keycloak.env
    networks:
      - net


#logging:
#    log_driver: syslog
#      log_opt:
#        tag: "{{docker}}/{{.Name}}"
#        syslog-address: "unix:///dev/log"


networks:
  net:
    driver: bridge
    ipam: 
      driver: default
      config:
        - subnet: 172.27.0.0/23
